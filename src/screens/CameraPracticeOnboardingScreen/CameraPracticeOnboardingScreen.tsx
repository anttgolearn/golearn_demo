import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, Dimensions } from 'react-native';
import { Button } from '../../shared/ui/button';
import { Progress } from '../../shared/ui/progress';

interface CameraPracticeOnboardingScreenProps {
  onComplete: () => void;
  onBack: () => void;
}

const { width } = Dimensions.get('window');

const CameraPracticeOnboardingScreen: React.FC<CameraPracticeOnboardingScreenProps> = ({
  onComplete,
  onBack
}) => {
  const [currentStep, setCurrentStep] = useState(0);

  const steps = [
    {
      title: "Ch√†o m·ª´ng ƒë·∫øn v·ªõi Th·ª±c h√†nh Camera",
      description: "Th·ª±c h√†nh k·ªπ nƒÉng ng√¥n ng·ªØ k√Ω hi·ªáu c·ªßa b·∫°n v·ªõi ph·∫£n h·ªìi th·ªùi gian th·ª±c b·∫±ng camera c·ªßa thi·∫øt b·ªã.",
      icon: "üì±",
      features: [
        "Nh·∫≠n di·ªán k√Ω hi·ªáu th·ªùi gian th·ª±c",
        "Ph·∫£n h·ªìi t·ª©c th√¨ v·ªÅ ƒë·ªô ch√≠nh x√°c",
        "Th·ª±c h√†nh 10 k√Ω hi·ªáu c∆° b·∫£n",
        "Theo d√µi ti·∫øn ƒë·ªô c·ªßa b·∫°n"
      ]
    },
    {
      title: "C√°ch ho·∫°t ƒë·ªông",
      description: "L√†m theo c√°c b∆∞·ªõc ƒë∆°n gi·∫£n n√†y ƒë·ªÉ t·∫≠n d·ª•ng t·ªëi ƒëa bu·ªïi th·ª±c h√†nh c·ªßa b·∫°n.",
      icon: "üéØ",
      features: [
        "ƒê·∫∑t m√¨nh tr∆∞·ªõc camera",
        "L√†m theo k√Ω hi·ªáu hi·ªÉn th·ªã tr√™n m√†n h√¨nh",
        "Th·ª±c h√†nh t·ª´ng k√Ω hi·ªáu cho ƒë·∫øn khi tho·∫£i m√°i",
        "Nh·∫≠n ph·∫£n h·ªìi t·ª©c th√¨ v·ªÅ ƒë·ªô ch√≠nh x√°c"
      ]
    },
    {
      title: "Thi·∫øt l·∫≠p Camera",
      description: "ƒê·∫£m b·∫£o b·∫°n c√≥ √°nh s√°ng t·ªët v√† v·ªã tr√≠ ph√π h·ª£p ƒë·ªÉ c√≥ tr·∫£i nghi·ªám t·ªët nh·∫•t.",
      icon: "üí°",
      features: [
        "ƒê·∫£m b·∫£o √°nh s√°ng t·ªët tr√™n m·∫∑t v√† tay",
        "Gi·ªØ tay trong khung h√¨nh camera",
        "Duy tr√¨ kho·∫£ng c√°ch tho·∫£i m√°i v·ªõi camera",
        "ƒê·∫£m b·∫£o thi·∫øt b·ªã c·ªßa b·∫°n ·ªïn ƒë·ªãnh"
      ]
    },
    {
      title: "S·∫µn s√†ng b·∫Øt ƒë·∫ßu?",
      description: "B·∫°n ƒë√£ s·∫µn s√†ng! H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh th·ª±c h√†nh ng√¥n ng·ªØ k√Ω hi·ªáu c·ªßa b·∫°n.",
      icon: "üöÄ",
      features: [
        "Bu·ªïi th·ª±c h√†nh s·∫Ω k√©o d√†i 5-10 ph√∫t",
        "B·∫°n c√≥ th·ªÉ t·∫°m d·ª´ng ho·∫∑c d·ª´ng b·∫•t c·ª© l√∫c n√†o",
        "Ti·∫øn ƒë·ªô c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông",
        "H√£y vui v·∫ª v√† ƒë·ª´ng lo l·∫Øng v·ªÅ s·ª± ho√†n h·∫£o!"
      ]
    }
  ];

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(prev => prev + 1);
    } else {
      onComplete();
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(prev => prev - 1);
    } else {
      onBack();
    }
  };

  const currentStepData = steps[currentStep];
  const progress = ((currentStep + 1) / steps.length) * 100;

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Button onClick={prevStep} variant="ghost" style={styles.backButton}>
          ‚Üê Quay l·∫°i
        </Button>
        <Text style={styles.title}>Th·ª±c h√†nh Camera</Text>
        <View style={styles.placeholder} />
      </View>

      <View style={styles.progressContainer}>
        <Progress value={progress} className="w-full" />
        <Text style={styles.progressText}>
          B∆∞·ªõc {currentStep + 1} trong {steps.length}
        </Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        <View style={styles.stepContainer}>
          <View style={styles.iconContainer}>
            <Text style={styles.icon}>{currentStepData.icon}</Text>
          </View>
          
          <Text style={styles.stepTitle}>{currentStepData.title}</Text>
          
          <Text style={styles.stepDescription}>{currentStepData.description}</Text>
          
          <View style={styles.featuresContainer}>
            {currentStepData.features.map((feature, index) => (
              <View key={index} style={styles.featureItem}>
                <Text style={styles.featureBullet}>‚Ä¢</Text>
                <Text style={styles.featureText}>{feature}</Text>
              </View>
            ))}
          </View>
        </View>
      </ScrollView>

      <View style={styles.controls}>
        <Button onClick={nextStep} className="w-full bg-orange-600 text-white py-4 px-8 rounded-lg mb-3">
          {currentStep === steps.length - 1 ? 'B·∫Øt ƒë·∫ßu th·ª±c h√†nh' : 'Ti·∫øp theo'}
        </Button>
        
        {currentStep < steps.length - 1 && (
          <Button onClick={onComplete} variant="ghost" className="py-3 px-6">
            B·ªè qua h∆∞·ªõng d·∫´n
          </Button>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFF8F3',
    padding: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  backButton: {
    padding: 8,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#292F32',
  },
  placeholder: {
    width: 60,
  },
  progressContainer: {
    marginBottom: 30,
  },
  progressText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginTop: 8,
  },
  content: {
    flex: 1,
  },
  stepContainer: {
    alignItems: 'center',
    paddingVertical: 20,
  },
  iconContainer: {
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#EB6837',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 24,
  },
  icon: {
    fontSize: 50,
  },
  stepTitle: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#292F32',
    textAlign: 'center',
    marginBottom: 16,
  },
  stepDescription: {
    fontSize: 18,
    color: '#666',
    textAlign: 'center',
    lineHeight: 26,
    marginBottom: 32,
    paddingHorizontal: 20,
  },
  featuresContainer: {
    width: '100%',
    paddingHorizontal: 20,
  },
  featureItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  featureBullet: {
    fontSize: 20,
    color: '#EB6837',
    marginRight: 12,
    marginTop: 2,
  },
  featureText: {
    fontSize: 16,
    color: '#666',
    lineHeight: 24,
    flex: 1,
  },
  controls: {
    paddingTop: 20,
  },
  primaryButton: {
    backgroundColor: '#EB6837',
    paddingVertical: 16,
    paddingHorizontal: 32,
    borderRadius: 8,
    marginBottom: 12,
  },
  skipButton: {
    paddingVertical: 12,
    paddingHorizontal: 24,
  },
});

export default CameraPracticeOnboardingScreen;
