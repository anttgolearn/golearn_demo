import React, { useEffect, useMemo, useState } from "react";
import { fetchChapterLessons, type LessonSummary } from "../../models/chapter-overview-store/chapter-overview-store";
import { HARDCODED_CHAPTERS } from "../../lib/mock-lessons";
import { LessonItem } from "../../components/molecules/LessonItem/LessonItem";

type ChapterOverviewScreenProps = {
  onOpenLesson?: (lessonId: string) => void;
};

export const ChapterOverviewScreen: React.FC<ChapterOverviewScreenProps> = ({ onOpenLesson }) => {
  const chapterId = useMemo(() => {
    const hash = window.location.hash.replace(/^#/, "");
    const match = hash.match(/^\/chapter\/(\d+)/);
    if (match) {
      const chapterNum = parseInt(match[1]);
      // Convert chapter number to unit_chapter format
      if (chapterNum <= 2) return `1_${chapterNum}`;
      if (chapterNum <= 4) return `2_${chapterNum - 2}`;
      if (chapterNum <= 6) return `3_${chapterNum - 4}`;
      if (chapterNum <= 8) return `4_${chapterNum - 6}`;
      if (chapterNum <= 10) return `5_${chapterNum - 8}`;
      if (chapterNum <= 12) return `6_${chapterNum - 10}`;
      if (chapterNum <= 14) return `7_${chapterNum - 12}`;
      if (chapterNum <= 16) return `8_${chapterNum - 14}`;
      if (chapterNum <= 18) return `9_${chapterNum - 16}`;
      if (chapterNum <= 20) return `10_${chapterNum - 18}`;
    }
    return "1_1";
  }, []);

  const [lessons, setLessons] = useState<LessonSummary[]>([]);
  const [loading, setLoading] = useState(true);
  const [locked, setLocked] = useState(false);

  useEffect(() => {
    let mounted = true;
    (async () => {
      setLoading(true);
      // Prefer hardcoded chapter payload if exists
      const hard = HARDCODED_CHAPTERS[chapterId as keyof typeof HARDCODED_CHAPTERS as any];
      if (hard) {
        if (!mounted) return;
        // Map to LessonSummary minimal fields
        const mapped: LessonSummary[] = hard.lessons.map((l, idx) => ({
          id: l.id,
          title: `Lesson ${idx + 1}`, // Will be overridden in LessonItem component
          // Map lesson type to existing trio used in UI
          type:
            l.type.toLowerCase() === 'discover' || l.type.toLowerCase() === 'info' || l.type.toLowerCase() === 'explore' || l.type.toLowerCase() === 'iconic'
              ? 'learn'
              : l.type.toLowerCase() === 'develop' || l.type.toLowerCase() === 'practice' || l.type.toLowerCase() === 'dialog' || l.type.toLowerCase() === 'training'
              ? 'trainer'
              : 'milestone',
          locked: l.locked,
          description: undefined,
          estimatedTime: 5,
        }));
        setLessons(mapped);
        setLocked(hard.locked);
        setLoading(false);
        document.title = `${hard.title} - Chapter ${hard.chapterNumber}`;
        return;
      }
      const data = await fetchChapterLessons(chapterId);
      if (!mounted) return;
      setLessons(data);
      setLocked(false);
      setLoading(false);
      document.title = `Chapter ${chapterId} - T·ªïng quan`;
    })();
    return () => { mounted = false; };
  }, [chapterId]);

  const getChapterInfo = (chapterId: string) => {
    const chapterInfo: Record<string, { title: string; description: string; icon: string; color: string; unit: string }> = {
      "1_1": { title: "Ch√†o h·ªèi v√† l·ªãch s·ª±", description: "H·ªçc c√°c k√Ω hi·ªáu ch√†o h·ªèi c∆° b·∫£n: Ch√†o, T·∫°m bi·ªát, Xin l·ªói", icon: "üëã", color: "bg-blue-50", unit: "Unit 1: Giao ti·∫øp c∆° b·∫£n" },
      "1_2": { title: "Gia ƒë√¨nh v√† m·ªëi quan h·ªá", description: "H·ªçc k√Ω hi·ªáu v·ªÅ c√°c th√†nh vi√™n gia ƒë√¨nh: B·ªë, M·∫π, Cha m·∫π, B·ªë m·∫π", icon: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", color: "bg-green-50", unit: "Unit 1: Giao ti·∫øp c∆° b·∫£n" },
      "2_1": { title: "C·∫£m x√∫c c∆° b·∫£n", description: "H·ªçc k√Ω hi·ªáu c·∫£m x√∫c c∆° b·∫£n: Vui m·ª´ng, Bu·ªìn t·∫£m, Gi·∫≠n d·ªØ, Th√≠ch th√∫, Ng·∫°c nhi√™n, Ho·∫£ng s·ª£, Lo s·ª£, Tuy·ªát v·ªçng, H·ªìi h·ªôp, B·ªëi r·ªëi", icon: "üòä", color: "bg-blue-50", unit: "Unit 2: C·∫£m x√∫c v√† t√¢m tr·∫°ng" },
      "2_2": { title: "C·∫£m x√∫c n√¢ng cao", description: "H·ªçc c√°c c·∫£m x√∫c ph·ª©c t·∫°p: T·ª± tin, Lo s·ª£, Ghen t·ªã, Tuy·ªát v·ªçng, Ng·∫πn ng√†oi, C√¥ ƒë∆°n, Gi·∫≠n d·ªói, N·ªïi gi·∫≠n", icon: "ü§î", color: "bg-orange-50", unit: "Unit 2: C·∫£m x√∫c v√† t√¢m tr·∫°ng" },
      "3_1": { title: "ƒê·ªông v·∫≠t th∆∞·ªùng g·∫∑p", description: "H·ªçc k√Ω hi·ªáu ƒë·ªông v·∫≠t: Con ch√≥, Con m√®o, Con g√†", icon: "üêï", color: "bg-purple-50", unit: "Unit 3: Thi√™n nhi√™n v√† ƒë·ªông v·∫≠t" },
      "3_2": { title: "Th·ªùi ti·∫øt v√† th·ªùi gian", description: "H·ªçc k√Ω hi·ªáu th·ªùi ti·∫øt: M√πa h√®, M√πa ƒë√¥ng, M√πa thu, M∆∞a ph√πn", icon: "üå§Ô∏è", color: "bg-cyan-50", unit: "Unit 3: Thi√™n nhi√™n v√† ƒë·ªông v·∫≠t" },
      "4_1": { title: "S·ªë ƒë·∫øm c∆° b·∫£n", description: "H·ªçc k√Ω hi·ªáu s·ªë ƒë·∫øm c∆° b·∫£n: S·ªë 1, S·ªë 2, S·ªë 3", icon: "üî¢", color: "bg-indigo-50", unit: "Unit 4: S·ªë ƒë·∫øm v√† h√¨nh h·ªçc" },
      "4_2": { title: "H√¨nh d·∫°ng v√† m√†u s·∫Øc", description: "H·ªçc k√Ω hi·ªáu h√¨nh d·∫°ng: H√¨nh tam gi√°c, H√¨nh tr√≤n, H√¨nh vu√¥ng", icon: "üî∫", color: "bg-pink-50", unit: "Unit 4: S·ªë ƒë·∫øm v√† h√¨nh h·ªçc" },
      "5_1": { title: "Th·ª©c ƒÉn v√† b·ªØa ƒÉn", description: "H·ªçc k√Ω hi·ªáu th·ª©c ƒÉn: C∆°m, Ph·ªü, C√°i b√°nh m√¨, C√°i b√°t", icon: "üçö", color: "bg-red-50", unit: "Unit 5: Th·ª©c ƒÉn v√† ƒë·ªì v·∫≠t" },
      "5_2": { title: "ƒê·ªì v·∫≠t trong nh√†", description: "H·ªçc k√Ω hi·ªáu ƒë·ªì v·∫≠t: C√°i ch·∫£o, C√°i n·ªìi, C·ª≠a s·ªï, L√° c√¢y", icon: "üè†", color: "bg-teal-50", unit: "Unit 5: Th·ª©c ƒÉn v√† ƒë·ªì v·∫≠t" },
      "6_1": { title: "Ph∆∞∆°ng ti·ªán giao th√¥ng", description: "H·ªçc k√Ω hi·ªáu ph∆∞∆°ng ti·ªán: √î t√¥, Xe m√°y, T√†u h·ªèa", icon: "üöó", color: "bg-lime-50", unit: "Unit 6: Giao th√¥ng v√† ho·∫°t ƒë·ªông" },
      "6_2": { title: "Ho·∫°t ƒë·ªông v√† s·ªü th√≠ch", description: "H·ªçc k√Ω hi·ªáu ho·∫°t ƒë·ªông: ƒê√° b√≥ng, ƒê√†n ghi ta, Gi·∫•c ng·ªß", icon: "‚öΩ", color: "bg-emerald-50", unit: "Unit 6: Giao th√¥ng v√† ho·∫°t ƒë·ªông" },
      "7_1": { title: "Cu·ªôc s·ªëng h·ªçc ƒë∆∞·ªùng", description: "H·ªçc k√Ω hi·ªáu tr∆∞·ªùng h·ªçc: C√¥ gi√°o, B·∫£ng h·ªçc sinh", icon: "üéì", color: "bg-violet-50", unit: "Unit 7: Tr∆∞·ªùng h·ªçc v√† c√¥ng vi·ªác" },
      "7_2": { title: "C√¥ng vi·ªác v√† ti·ªÅn b·∫°c", description: "H·ªçc k√Ω hi·ªáu c√¥ng vi·ªác: C√°i m√°y in, T·ªù ti·ªÅn", icon: "üíº", color: "bg-amber-50", unit: "Unit 7: Tr∆∞·ªùng h·ªçc v√† c√¥ng vi·ªác" },
      "8_1": { title: "C·∫£m x√∫c ph·ª©c t·∫°p", description: "H·ªçc c√°c c·∫£m x√∫c ph·ª©c t·∫°p: Ngh·∫πn ng√†o, C√¥ ƒë∆°n, Gi·∫≠n d·ªói, N·ªïi gi·∫≠n", icon: "üò∞", color: "bg-red-100", unit: "Unit 8: C·∫£m x√∫c n√¢ng cao" },
      "8_2": { title: "C·∫£m x√∫c ƒë·∫∑c bi·ªát", description: "H·ªçc c√°c c·∫£m x√∫c ƒë·∫∑c bi·ªát: T·ª± tin, Lo s·ª£, Ghen t·ªã, Tuy·ªát v·ªçng", icon: "ü§Ø", color: "bg-purple-100", unit: "Unit 8: C·∫£m x√∫c n√¢ng cao" },
      "9_1": { title: "ƒê·ªì v·∫≠t h·ªçc t·∫≠p", description: "H·ªçc k√Ω hi·ªáu ƒë·ªì v·∫≠t h·ªçc t·∫≠p: C√¢y b√∫t, Quy·ªÉn s√°ch", icon: "‚úèÔ∏è", color: "bg-indigo-100", unit: "Unit 9: ƒê·ªì v·∫≠t v√† d·ª•ng c·ª•" },
      "9_2": { title: "ƒê·ªì v·∫≠t c√° nh√¢n", description: "H·ªçc k√Ω hi·ªáu ƒë·ªì v·∫≠t c√° nh√¢n: Qu·∫ßn b√≤, C√°i √°o", icon: "üëï", color: "bg-pink-100", unit: "Unit 9: ƒê·ªì v·∫≠t v√† d·ª•ng c·ª•" },
      "10_1": { title: "Th·ª±c v·∫≠t", description: "H·ªçc k√Ω hi·ªáu th·ª±c v·∫≠t: L√° c√¢y", icon: "üåø", color: "bg-green-100", unit: "Unit 10: Thi√™n nhi√™n v√† m√¥i tr∆∞·ªùng" },
      "10_2": { title: "M√¥i tr∆∞·ªùng s·ªëng", description: "H·ªçc k√Ω hi·ªáu m√¥i tr∆∞·ªùng: C·ª≠a s·ªï (kh√¥ng gian s·ªëng)", icon: "üè°", color: "bg-teal-100", unit: "Unit 10: Thi√™n nhi√™n v√† m√¥i tr∆∞·ªùng" },
    };
    return chapterInfo[chapterId] || { title: "Ch∆∞∆°ng h·ªçc", description: "H·ªçc k√Ω hi·ªáu ng√¥n ng·ªØ", icon: "üìö", color: "bg-blue-50", unit: "Unit" };
  };

  const renderHeader = () => {
    const chapterInfo = getChapterInfo(chapterId);
    const totalTime = lessons.reduce((sum, lesson) => sum + (lesson.estimatedTime || 0), 0);
    
    return (
      <div
        className={`rounded-xl p-8 text-center ${locked ? "bg-gray-100" : chapterInfo.color}`}
        data-testid="chapter-overview-header"
      >
        <div className="relative">
          <div className="absolute left-0 top-1">
            <button
              className="border rounded-full w-12 h-12 flex items-center justify-center bg-white text-lg hover:bg-gray-50 transition-colors shadow-sm"
              data-testid="chapter-overview-back"
              aria-label="Back"
              onClick={() => window.location.href = '/dashboard#/dashboard'}
            >
              ‚Üê
            </button>
          </div>
          <div className="inline-block px-4 py-1.5 rounded-full text-sm font-semibold bg-white text-gray-700 shadow-sm">
            Chapter {chapterId.replace('_', '.')}
          </div>
          <div className="mt-4">
            <div className="text-sm font-medium text-gray-500 mb-2"></div>
            <span className="text-5xl mb-4 block">{chapterInfo.icon}</span>
            <h1 className="text-3xl font-extrabold text-gray-900 mb-2">{chapterInfo.title}</h1>
            <p className="text-base text-gray-600 mt-2 max-w-2xl mx-auto leading-relaxed">
              {chapterInfo.description}
            </p>
            {totalTime > 0 && (
              <div className="mt-4 inline-flex items-center gap-2 bg-white/70 backdrop-blur-sm px-4 py-2 rounded-full text-sm font-medium text-gray-700 shadow-sm">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="2"/>
                  <path d="M12 6v6l4 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                </svg>
                {totalTime} ph√∫t ‚Ä¢ {lessons.length} b√†i h·ªçc
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderSoftPaywall = () => (
    <div className="mt-6">
      <div className="rounded-lg border p-5 bg-gradient-to-br from-gray-50 to-white">
        <h2 className="text-lg font-semibold text-center">N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a to√†n b·ªô ch∆∞∆°ng</h2>
        <p className="text-sm text-muted-foreground text-center mt-1">Tr·∫£i nghi·ªám kh√¥ng gi·ªõi h·∫°n v√† ph·∫ßn th∆∞·ªüng h·∫•p d·∫´n</p>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 mt-4">
          {["L·ªô tr√¨nh ƒë·∫ßy ƒë·ªß", "Theo d√µi ti·∫øn ƒë·ªô", "Huy hi·ªáu & th√†nh t√≠ch"].map((b) => (
            <div key={b} className="rounded border p-3 text-center bg-white">{b}</div>
          ))}
        </div>
      </div>
    </div>
  );

  const _renderLessonsList = () => {
    const activeLessonIndex = 1; // Second lesson is active for demo
    const isHybridLockedChapter = locked;
    
    return (
      <div className="grid grid-cols-1 gap-4 mt-6">
        {lessons.map((lesson, index) => {
          const _isActiveLesson = index === activeLessonIndex && !isHybridLockedChapter;
          
          return (
            <LessonItem
              key={`lesson-list-item-${index}`}
              lesson={lesson}  // Contains lesson.type = 'Iconic'
              index={index}
              isActiveLesson={_isActiveLesson}
              unitId={1} // Default unit ID
              chapterId={parseInt(chapterId)}
              chapterLessonsLength={lessons.length}
              onPress={() => onOpenLesson?.(String(lesson.id))}
            />
          );
        })}
      </div>
    );
  };


  return (
    <div className="container mx-auto p-4 max-w-3xl" data-testid="chapter-overview-screen">
      {renderHeader()}
      {loading ? (
        <div className="mt-6">ƒêang t·∫£i...</div>
      ) : (
        <>
          {locked ? renderSoftPaywall() : null}
          {_renderLessonsList()}
          <div className="h-28" />
          <div className="fixed bottom-0 left-0 right-0 bg-white/90 border-t">
            <div className="container mx-auto max-w-3xl px-4 py-4 flex justify-center">
              <button
                className="px-8 py-3 rounded-lg bg-blue-600 hover:bg-blue-700 text-white shadow text-lg font-semibold"
                onClick={() => {
                  const next = lessons.find(() => true);
                  if (next) onOpenLesson?.(String(next.id));
                }}
                data-testid="chapter-continue-cta"
                aria-label="Continue learning"
              >
                Ti·∫øp t·ª•c h·ªçc
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default ChapterOverviewScreen;


